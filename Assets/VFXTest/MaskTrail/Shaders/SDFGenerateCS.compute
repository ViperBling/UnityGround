struct EdgePixel
{
    int edge;
};

int _Width;

#pragma kernel GetEdge

RWStructuredBuffer<EdgePixel> Result;
Texture2D<float4> Source;

[numthreads(32, 32, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * _Width + id.x;

    float4 thisPixel = Source[id.xy];
    float4 upPixel = Source[float2(id.x, id.y + 1)];
    float4 downPixel = Source[float2(id.x, id.y - 1)];
    float4 leftPixel = Source[float2(id.x - 1, id.y)];
    float4 rightPixel = Source[float2(id.x + 1, id.y)];

    int thisWhite = thisPixel.x * thisPixel.y * thisPixel.z * thisPixel.w;
    int upWhite = upPixel.x * upPixel.y * upPixel.z * upPixel.w;
    int downWhite = downPixel.x * downPixel.y * downPixel.z * downPixel.w;
    int leftWhite = leftPixel.x * leftPixel.y * leftPixel.z * leftPixel.w;
    int rightWhite = rightPixel.x * rightPixel.y * rightPixel.z * rightPixel.w;
    int otherWhite = upWhite + downWhite + leftWhite + rightWhite;

    int isEdge = 0;
    if (thisWhite > 0.1 && otherWhite < 0.1)
    {
        isEdge = 1;
    }

    Result[index].edge = isEdge;
}
