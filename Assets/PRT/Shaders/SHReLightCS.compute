#pragma kernel MainCS

#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
#pragma multi_compile _ _SHADOWS_SOFT

// #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"
#include "SH.hlsl"

RWStructuredBuffer<Surfel> _Surfels;
RWStructuredBuffer<float3> _SurfelRadiance; // for debug

float _SkyLightIntensity;
float4 _ProbePos;

RWStructuredBuffer<int> _CoefficientSH9;

int _IndexInProbeVolume;
RWStructuredBuffer<int> _CoefficientVoxel;
StructuredBuffer<int> _LastFrameCoefficientVoxel;
float _GIIntensity;

float4 _CoefficientVoxelSize;
float4 _CoefficientVoxelCorner;
float _CoefficientVoxelGridSize;

[numthreads(32, 16, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    uint surfelIndex = id.x * 16 + id.y;
    Surfel surfel = _Surfels[surfelIndex];

    Light mainLight = GetMainLight();

    float4 shadowCoord = TransformWorldToShadowCoord(surfel.position);
    float atten = SampleShadowmap(
        TEXTURE2D_ARGS(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture),
        shadowCoord,
        GetMainLightShadowSamplingData(),
        GetMainLightShadowParams(), false);

    float NoL = saturate(dot(surfel.normal, mainLight.direction));
    float3 radiance = surfel.albedo * mainLight.color * NoL * atten * (1.0 - surfel.skyMask);

    float3 dir = normalize(surfel.position - _ProbePos.xyz);

    float3 skyColor = SAMPLE_TEXTURECUBE_LOD(_GlossyEnvironmentCubeMap, sampler_GlossyEnvironmentCubeMap, dir, 0).rgb;
    radiance += skyColor * surfel.skyMask * _SkyLightIntensity;

    float3 history = SampleSHVoxel(
        float4(surfel.position, 1.0),
        surfel.albedo,
        surfel.normal,
        _LastFrameCoefficientVoxel,
        _CoefficientVoxelSize,
        _CoefficientVoxelCorner,
        _CoefficientVoxelGridSize);
    radiance += history * _GIIntensity;

    const float N = 32 * 16;
    float3 c[9];
    c[0] = SH(0,  0, dir) * radiance * 4.0 * PI / N;
    c[1] = SH(1, -1, dir) * radiance * 4.0 * PI / N;
    c[2] = SH(1,  0, dir) * radiance * 4.0 * PI / N;
    c[3] = SH(1,  1, dir) * radiance * 4.0 * PI / N;
    c[4] = SH(2, -2, dir) * radiance * 4.0 * PI / N;
    c[5] = SH(2, -1, dir) * radiance * 4.0 * PI / N;
    c[6] = SH(2,  0, dir) * radiance * 4.0 * PI / N;
    c[7] = SH(2,  1, dir) * radiance * 4.0 * PI / N;
    c[8] = SH(2,  2, dir) * radiance * 4.0 * PI / N;

    // Write result to _CoefficientSH9
    for (int i = 0; i < 9; i++)
    {
        InterlockedAdd(_CoefficientSH9[i * 3 + 0], EncodeFloatToInt(c[i].x));
        InterlockedAdd(_CoefficientSH9[i * 3 + 1], EncodeFloatToInt(c[i].y));
        InterlockedAdd(_CoefficientSH9[i * 3 + 2], EncodeFloatToInt(c[i].z));
    }

    if (_IndexInProbeVolume >= 0)
    {
        const int coeffByteSize = 27;
        int offset = _IndexInProbeVolume * coeffByteSize;
        for (int i = 0; i < 9; i++)
        {
            InterlockedAdd(_CoefficientVoxel[offset + i * 3 + 0], EncodeFloatToInt(c[i].x));
            InterlockedAdd(_CoefficientVoxel[offset + i * 3 + 1], EncodeFloatToInt(c[i].y));
            InterlockedAdd(_CoefficientVoxel[offset + i * 3 + 2], EncodeFloatToInt(c[i].z));
        }
    }
    _SurfelRadiance[surfelIndex] = radiance;
}